version: '3.8'

networks:
  cloud_storage_network:
    driver: bridge

services:
  db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cloud_storage_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloud_storage_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  minio:
    image: minio/minio:latest
    container_name: minio_storage
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: http://minio:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9002:9000"  # Changed from 9000 to 9002 to avoid conflicts
      - "9003:9001"  # Changed from 9001 to 9003 to avoid conflicts
    networks:
      - cloud_storage_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 60s

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: fastapi_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/my_venv  # Exclude virtual environment from host mount
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloud_storage_network
    environment:
      # Database
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      
      # MinIO Object Storage
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_SECURE: "false"  # Set to true in production with HTTPS
      
      # Redis Cache
      REDIS_URL: redis://redis:6379/0
      
      # AI/ML Configuration
      PYTHON_ENV: development
      LOG_LEVEL: INFO
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next  # Exclude .next build cache from host mount
    depends_on:
      - backend
    networks:
      - cloud_storage_network
    environment:
      NODE_ENV: development
      # For client-side API calls (browser to backend)
      NEXT_PUBLIC_API_URL: http://localhost:8000
      # For server-side API calls (container to container)
      INTERNAL_API_URL: http://backend:8000
      # Redis for client-side caching if needed
      NEXT_PUBLIC_REDIS_URL: http://localhost:6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  pg_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local